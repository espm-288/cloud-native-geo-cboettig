[
  {
    "objectID": "README.html",
    "href": "README.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome\nThis GitHub repository + notebook provides the real-time notes for our exploratory course on Cloud Native Geospatial Data in R & Python.\nThe website is built using quarto to render qmd and ipynb files, and is rendered and published automatically through GitHub Actions.\nUsers can use GitHub Codespaces to interactively run all files in the notebook for free and without installing any software."
  },
  {
    "objectID": "notebook/example-4.html",
    "href": "notebook/example-4.html",
    "title": "4: Biodiversity Intactness Index",
    "section": "",
    "text": "library(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\nlibrary(tmap)\nlibrary(dplyr)\n\n\nlibrary(spData)\n\nTo access larger datasets in this package, install the spDataLarge\npackage with: `install.packages('spDataLarge',\nrepos='https://nowosad.github.io/drat/', type='source')`\n\nbox_ca &lt;- spData::us_states |&gt; filter(NAME==\"California\") |&gt; st_bbox()\n\n\nbox &lt;- c(xmin=-123, ymin=37, xmax=-121, ymax=39) \nbox &lt;- c(box_ca)\nitems &lt;-  \n  stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\")  |&gt;\n  stac_search(collections = \"io-biodiversity\",\n              bbox = box,\n              limit = 100)  |&gt;\n  post_request() |&gt;\n  items_sign(sign_planetary_computer())\n\n\ncol &lt;- stac_image_collection(items$features, asset_names = c(\"data\"))\n\nWarning in stac_image_collection(items$features, asset_names = c(\"data\")): STAC\nasset with name 'data' does not include eo:bands metadata and will be\nconsidered as a single band source\n\ncube &lt;- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = \"2017-01-01\", t1 = \"2017-12-31\",\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.005, dy = 0.005, dt = \"P1Y\")\n\ndata &lt;-  raster_cube(col, cube)\n\n\nbii &lt;- data |&gt; slice_time(\"2017-01-01\") |&gt;  st_as_stars()\ntm_shape(bii) + tm_raster()\n\nstars object downsampled to 1028 by 948 cells.\n\n\nWarning in value[[3L]](cond): could not rename the data.table"
  },
  {
    "objectID": "notebook/example-2.html",
    "href": "notebook/example-2.html",
    "title": "2: Adding Polygons",
    "section": "",
    "text": "library(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\nlibrary(tmap)\nlibrary(dplyr)\nWe read in a spatial vector dataset with polygons using the Virtual Filesystem Interface (VSI) feature:\nurl &lt;- \"/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/mappinginequality.json\" \n\nredlines &lt;- \n  url |&gt;\n  st_read() |&gt;\n  st_make_valid() |&gt; \n  filter(st_is_valid(geometry))\n\nReading layer `mappinginequality' from data source \n  `/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/mappinginequality.json' \n  using driver `GeoJSON'\nSimple feature collection with 10150 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -122.7675 ymin: 25.70537 xmax: -69.60044 ymax: 48.2473\nGeodetic CRS:  WGS 84\nIn sf package, vector data looks almost like a normal tibble (data.frame), but with a special column (usually called “geom” or “geometry”). We can do the usual dplyr operations on the columns, e.g. to select just the redlining polygons in SF:\nsf_redlines &lt;- redlines |&gt; filter(city == \"San Francisco\")\nWe can use this as our bounding box from example 1:\nbox &lt;- st_bbox(sf_redlines)\n\nstart_date &lt;- \"2022-06-01\"\nend_date &lt;- \"2022-08-01\"\n\nitems &lt;-\n  stac(\"https://earth-search.aws.element84.com/v0/\") |&gt;\n  stac_search(collections = \"sentinel-s2-l2a-cogs\",\n              bbox = c(box),\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              limit = 100) |&gt;\n  ext_query(\"eo:cloud_cover\" &lt; 20) |&gt;\n  post_request()\ncol &lt;- stac_image_collection(items$features, asset_names = c(\"B08\", \"B04\", \"SCL\"))\n\ncube &lt;- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.0001, dy = 0.0001, dt = \"P1D\",\n                  aggregation = \"median\", resampling = \"average\")\n\nmask &lt;- image_mask(\"SCL\", values=c(3, 8, 9)) # mask clouds and cloud shadows\n\ndata &lt;-  raster_cube(col, cube, mask = mask)\nndvi &lt;- data |&gt;\n  select_bands(c(\"B04\", \"B08\")) |&gt;\n  apply_pixel(\"(B08-B04)/(B08+B04)\", \"NDVI\") |&gt;\n  reduce_time(c(\"mean(NDVI)\"))\nndvi_stars &lt;- st_as_stars(ndvi)\nmako &lt;- tm_scale_continuous(values = viridisLite::mako(30))\nfill &lt;- tm_scale_continuous(values = \"Greens\")\n\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako) + \n  tm_shape(sf_redlines) + tm_borders(\"grade\", lwd=2)"
  },
  {
    "objectID": "notebook/example-2.html#interactive-maps",
    "href": "notebook/example-2.html#interactive-maps",
    "title": "2: Adding Polygons",
    "section": "Interactive maps",
    "text": "Interactive maps\ntmap_mode(\"view\")\ntmap mode set to 'view'\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako) + \n  tm_shape(sf_redlines) + tm_borders(\"grade\", lwd=2)"
  },
  {
    "objectID": "notebook/example-1.html",
    "href": "notebook/example-1.html",
    "title": "1: Satellite data",
    "section": "",
    "text": "library(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\nlibrary(tmap)\nlibrary(dplyr)\nearthdatalogin::gdal_cloud_config()\ngdalcubes::gdalcubes_options(parallel = TRUE)\n\n\nbox &lt;- c(xmin=-123, ymin=37, xmax=-121, ymax=39) \nstart_date &lt;- \"2022-06-01\"\nend_date &lt;- \"2022-08-01\"\nitems &lt;-\n  stac(\"https://earth-search.aws.element84.com/v0/\") |&gt;\n  stac_search(collections = \"sentinel-s2-l2a-cogs\",\n              bbox = box,\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              limit = 100) |&gt;\n  ext_query(\"eo:cloud_cover\" &lt; 20) |&gt;\n  post_request()\n\n\ncol &lt;- stac_image_collection(items$features, asset_names = c(\"B08\", \"B04\", \"SCL\"))\n\nWarning in stac_image_collection(items$features, asset_names = c(\"B08\", : STAC\nasset with name 'SCL' does not include eo:bands metadata and will be considered\nas a single band source\n\ncube &lt;- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.001, dy = 0.001, dt = \"P1M\",\n                  aggregation = \"median\", resampling = \"average\")\n\nThe SCL data layer in Sentinel is one of three ‘quality assurance’ layers provided in this data catalog. Table 3 in this description of the Sentinel-2 Level2A Specifications summarizes the classification codes (Cloud shadows, medium probability cloud, high probability cloud). An image mask basically drops these bad pixels.\n\nmask &lt;- image_mask(\"SCL\", values=c(3, 8, 9)) # mask clouds and cloud shadows\n\ndata &lt;-  raster_cube(col, cube, mask = mask)\n\n\nndvi &lt;- data |&gt;\n  select_bands(c(\"B04\", \"B08\")) |&gt;\n  apply_pixel(\"(B08-B04)/(B08+B04)\", \"NDVI\") |&gt;\n  reduce_time(c(\"mean(NDVI)\")) \n\n\nndvi_stars &lt;- st_as_stars(ndvi)\n\n\nmako &lt;- tm_scale_continuous(values = viridisLite::mako(30))\nfill &lt;- tm_scale_continuous(values = \"Greens\")\n\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako)\n\nstars object downsampled to 1000 by 1000 cells.\n\n\nWarning in value[[3L]](cond): could not rename the data.table"
  },
  {
    "objectID": "notebook/example-3.html",
    "href": "notebook/example-3.html",
    "title": "3: animations",
    "section": "",
    "text": "Following the same template, but we compute over a larger bounding box and generate an animation\n\nlibrary(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\nlibrary(tmap)\nlibrary(dplyr)\nearthdatalogin::gdal_cloud_config()\nearthdatalogin::with_gdalcubes()\n\n\nbox &lt;- c(xmin=-123, ymin=37, xmax=-122, ymax=38) \nstart_date &lt;- \"2022-01-01\"\nend_date &lt;- \"2022-06-30\"\nitems &lt;-\n  stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") |&gt;\n  stac_search(collections = \"sentinel-2-l2a\",\n              bbox = box,\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              limit = 1000) |&gt;\n  ext_query(\"eo:cloud_cover\" &lt; 20) |&gt;\n  post_request() |&gt;\n  items_sign(sign_planetary_computer())\n\nLet’s do a true-color RGB image this time by combining data from Blue, Green, and Red bands:\n\ncol &lt;- stac_image_collection(items$features, asset_names = c(\"B02\", \"B03\", \"B04\", \"SCL\"))\n\nWarning in stac_image_collection(items$features, asset_names = c(\"B02\", : STAC\nasset with name 'SCL' does not include eo:bands metadata and will be considered\nas a single band source\n\ncube &lt;- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.001, dy = 0.001, dt = \"P1M\")\n\ndata &lt;-  raster_cube(col, cube)\n\n\nndvi &lt;- data |&gt;\n  select_bands(c(\"B02\",\"B03\", \"B04\")) |&gt;\n  write_ncdf(\"visual.nc\", overwrite=TRUE)\n\nWhile we could go directly from apply_pixel to animate, here we show how to stash a copy of the computed, rescaled and reprojected data as a local netcdf file that can be used in any further analysis without going back to the original data. To continue our gdalcubes pipeline, we can easily load this space-time ncdf cube and continue as before:\n\nncdf_cube(\"visual.nc\") |&gt;\n animate(rgb=3:1, \n         col = viridisLite::mako, fps=2, \n         save_as=\"visual.gif\")\n\n[1] \"visual.gif\""
  },
  {
    "objectID": "notebook/fire-example.html",
    "href": "notebook/fire-example.html",
    "title": "5: Fire Severity using Normalized Burn Index",
    "section": "",
    "text": "library(sf)\nlibrary(stars)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(rstac)\nlibrary(gdalcubes)\nurl &lt;- \"https://34c031f8-c9fd-4018-8c5a-4159cdff6b0d-cdn-endpoint.azureedge.net/-/media/calfire-website/what-we-do/fire-resource-assessment-program---frap/gis-data/april-2023/fire221gdb.zip?rev=9e3e1e5e61e242d5b2994d666d72a91a&hash=F424990CD64BB7C4CF01C6CE211C0A59\"\ndownload.file(url, \"fire221.gdb.zip\",  mode=\"wb\")\n\nunzip(\"fire221.gdb.zip\")\nfire_polys &lt;- \n  read_sf(\"fire22_1.gdb\", layer = \"firep22_1\") |&gt; \n  filter(st_is_valid(Shape))\njtree &lt;- \n  read_sf(\"/vsicurl/https://huggingface.co/datasets/cboettig/biodiversity/resolve/main/data/NPS.gdb\") |&gt; \n  filter(UNIT_NAME == \"Joshua Tree National Park\") |&gt; \n  st_transform(st_crs(fire_polys))\nfire_is_in_jtree &lt;- st_intersects(fire_polys, jtree, sparse=FALSE)\nfire_jtree &lt;- fire_polys |&gt; filter(fire_is_in_jtree)\n\nWarning: Using one column matrices in `filter()` was deprecated in dplyr 1.1.0.\nℹ Please use one dimensional logical vectors instead.\ntmap_mode(\"plot\")\n\ntmap mode set to 'plot'\n\ntm_shape(jtree) + tm_polygons() + \n tm_shape(fire_jtree) + tm_polygons(\"YEAR_\")\n\nWarning: Some legend items or map compoments do not fit well (e.g. due to the\nspecified font size)."
  },
  {
    "objectID": "notebook/fire-example.html#landsat-example",
    "href": "notebook/fire-example.html#landsat-example",
    "title": "5: Fire Severity using Normalized Burn Index",
    "section": "Landsat example",
    "text": "Landsat example"
  },
  {
    "objectID": "notebook/fire-example.html#sentinel-2-example",
    "href": "notebook/fire-example.html#sentinel-2-example",
    "title": "5: Fire Severity using Normalized Burn Index",
    "section": "Sentinel-2 Example",
    "text": "Sentinel-2 Example\n\nbig_fire &lt;- fire_jtree |&gt; \n  filter(YEAR_ &gt; \"2015\") |&gt; \n  filter(Shape_Area == max(Shape_Area)) \n\n\nbox &lt;- big_fire |&gt; st_transform(4326) |&gt; st_bbox() \nalarm_date &lt;- big_fire$ALARM_DATE\n\n\nstart_date &lt;- as.character( alarm_date - days(5) )\nend_date &lt;- as.character( alarm_date + days(5) )\n\nitems &lt;-  \n  stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\")  |&gt;\n  stac_search(collections = \"sentinel-2-l2a\",\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              bbox = c(box))  |&gt;\n  post_request() |&gt;\n  items_sign(sign_planetary_computer())\n\n\ncol &lt;- stac_image_collection(items$features, asset_names = c(\"B08\", \"B12\", \"SCL\"))\n\nWarning in stac_image_collection(items$features, asset_names = c(\"B08\", : STAC\nasset with name 'SCL' does not include eo:bands metadata and will be considered\nas a single band source\n\ncube &lt;- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.0001, dy = 0.0001, dt = \"P1D\")\n\nmask &lt;- image_mask(\"SCL\", values=c(3, 8, 9)) # mask clouds and cloud shadows\ndata &lt;-  raster_cube(col, cube, mask = mask)\n\n\nnbr &lt;- data |&gt; \n  apply_pixel(\"(B08-B12)/(B08+B12)\", \"NBR\") \n\nbefore_fire &lt;- nbr |&gt; slice_time(\"2022-05-25\") \nafter_fire &lt;- nbr  |&gt; slice_time(\"2022-05-30\")\n\n\nbefore_fire |&gt; plot()\n\n\n\n\n\nafter_fire |&gt; plot()\n\n\n\n\n\nafter_fire_stars &lt;- after_fire |&gt; st_as_stars()\nbefore_fire_stars &lt;- before_fire |&gt; st_as_stars()\n\nst_dimensions(before_fire_stars) &lt;- st_dimensions(after_fire_stars)\n\ndnbr &lt;- before_fire_stars - after_fire_stars\n\n\ntmap_mode(\"view\")\n\ntmap mode set to 'view'\n\ntm_shape(dnbr) + tm_raster() +\ntm_shape(big_fire) + tm_borders() \n\nWarning in value[[3L]](cond): could not rename the data.table\n\n\nVariable(s) \"col\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  }
]